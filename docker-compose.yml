version: "3.9"

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    restart: unless-stopped
    env_file:
      - backend/.env.example
      - backend/.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - ./backend:/app
    ports:
      - "8080:8000"

  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: python -m app.worker
    restart: unless-stopped
    env_file:
      - backend/.env.example
      - backend/.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - ./backend:/app

  masterbot:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: python -m app.workers.master_bot
    restart: unless-stopped
    env_file:
      - backend/.env.example
      - backend/.env
    depends_on:
      redis:
        condition: service_started
    volumes:
      - ./backend:/app

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    restart: unless-stopped
    env_file:
      - frontend/.env.example
      - frontend/.env
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_started
    volumes:
      - ./frontend:/app

  poller:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: python -m app.workers.avito_poller
    restart: unless-stopped
    env_file:
      - backend/.env.example
      - backend/.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - ./backend:/app

  proxy:
    image: caddy:2
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deploy/Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      backend:
        condition: service_started
      frontend:
        condition: service_started

  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: tuberry
      POSTGRES_USER: tuberry
      POSTGRES_PASSWORD: tuberry
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tuberry -d tuberry"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    volumes:
      - redisdata:/data

volumes:
  pgdata:
  redisdata:
  caddy_data:
  caddy_config:
